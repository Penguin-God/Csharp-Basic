using System;

namespace Data_Basic
{
    class Program
    {
        static void Main(string[] args)
        {
            // byte(1바이트 0 ~ 255), short(2바이트 -3만 ~ 3만), int(4바이트 -21억 ~ 21억), long(8바이트 싹 다)
            // 범위가 큰 자료형에서 작은 자료형을 빼거나 더하는 것은 가능하지만 반대는 안됨
            // 기획이 언제 바뀔 줄 모르니까 범위에 여유 좀 두기 ( ??? : 아 원래는 레벨이 100까지였는데 2000까지 늘리는거 가능한가요? )
            // 아이템 고유 번호 같이 생성됨에 따라 끝도 없이 늘어나는 변수는 long 같은 걸로 해두기

            // 범위 최솟값에서 1 빼면 최댓값 됨 은행 같은데 해킹 할때 쓰는 방법 중 하나( ??? : 0에서 1 빼면 4조가 나오는 마술!!! )
            // 최댓값에서 더해서 반대도 가능함
            int number = -2100000000;
            number -= 100000000;
            Console.WriteLine("Hello Wolrd! {0}", number);

            // 10진수 : 평소에 우리가 쓰는거
            // 한자릿 수 : 01, 02, 03, 04, 05, 06, 07, 08, 09
            // 09에 01 더하면 9 다음이 없으니까 0으로 리셋되고 0은 1로 승격되서 10이 됨

            // 2진수 : 컴퓨터가 쓰는거
            // 표시 가능한거 : 0b00, 0b01 (0b는 2진수 앞에 붙이는 식별자)
            // 10진수랑 똑같이 0b01 다음에 쓸게 없으니까 앞에건 올리고 뒤에건 리셋시킴
            // 0b00, 0b01, 0b10, 0b11, 0b100, 0b101 ...........

            // 16진수 : 존나게 길다는 2진수의 단점을 메꿀 수 있는거
            // 01~09, A, B, C, D, E, F (10번째 넘어가면 숫자로 표현 못하니까 알파벳 가져온거 대소문자 구분 안함)
            // 여기는 0x 붙임
            // 0x01.... 0x0F, 0x10 (표시할거 없으면 리셋되고 앞에거 올라가는거 똑같음)

            // 2진수와 16진수의 변환
            // 2진수의 4자릿수로 표현가능한 형태는 총 16가지임 즉 16진수로 변환이 쉬움
            // 0b10001111 = 0b 1000 1111 = 0x 08 0F = 0x080F
            // 위에서처럼 4자리수로 끊으면 변환이 쉬움

            // 1bit 는 00, 01 처럼 전기 신호가 있는지 없는지 판별하는 최소 단위
            // 1byte는 1bit가 8개 있는거
            // 0b11111111 = 0b10000000 + 0b01000000... + 0b00000001 = 255
            // 따라서 1byte의 크기를 가진 자료형 byte가 표시할 수 있는 범위는 0~255

            // 음수의 표현
            // 가장 큰 10000000(128)을 음수로 사용 그러면 0b11111111 = -1
            // 즉 1바이트는 -128~127 까지 표현 가능
            // 이렇게 음수를 표현할 경우 0을 -0, +0 처럼 안 나누고 표현 가능
            // 음수값을 양수값으로 바꾸는게 편함 (이진수 0, 1 뒤집고 1(0001) 더하면 됨)

            // 4바이트 소수점 7자리 정도까지 정확
            float f = 2.33f;

            // 8바이트
            double d = 2.33;

            // 소수점 연산은 정수형보다 훨씬 더 복잡하고 비쌈
            double da = f + d;
        }
    }
}
