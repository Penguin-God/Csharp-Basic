        // 내가 짠 솔트 (버블 정렬)
        static int[] GetSortArray(int[] arr)
        {
            int count = 0;
            while (true)
            {
                count++;
                bool mediateArray = false;
                for (int i = 1; i < arr.Length; i++)
                {
                    count++;
                    if (arr[i - 1] > arr[i])
                    {
                        mediateArray = true;
                        while (true)
                        {
                            count++;
                            if (arr[i - 1] > arr[i])
                            {
                                int saveBigNum = arr[i - 1];
                                arr[i - 1] = arr[i];
                                arr[i] = saveBigNum;
                                i++;
                            }
                            else break;
                        }
                        break;
                    }
                }
                if (!mediateArray) break;
            }
            Console.WriteLine(count);
            return arr;
        }

        // 강의에선 짠 Sort (선택 정렬)
        static int[] GetSortArr(int[] arr)
        {
            int count = 0;

            for(int i = 0; i < arr.Length; i++)
            {
                count++;
                int minIndex = i;
                for(int j = i; j < arr.Length; j++)
                {
                    count++;
                    if (arr[j] < arr[minIndex]) minIndex = j;
                }

                int temp = arr[i];
                arr[i] = arr[minIndex];
                arr[minIndex] = temp;
            }

            Console.WriteLine(count);
            return arr;
        }

        class Map
        {
            // 다차원 배열에서 .Length 쓰면 모든 요소들의 개수(여기서는 50)를 가져옴
            // 하지만 리스트 배열, Queue 배열같은걸 쓰면 그냥 리스트, 혹은 Queue의 개수를 가져온다. 그래서 컬랜디에서 버그가 없었다.
            // tiles.GetLength(0) : 10
            // tiles.GetLength(1) : 5
            int[,] tiles = new int[10, 5]
            {
                {1,1,1,1,1 },
                {1,0,0,0,1 },
                {1,0,0,0,1 },
                {1,0,0,0,1 },
                {1,0,0,0,1 },
                {1,0,0,0,1 },
                {1,0,0,0,1 },
                {1,0,0,0,1 },
                {1,0,0,0,1 },
                {1,1,1,1,1 }
            };

            public void Render()
            {
                for(int i = 0; i < tiles.GetLength(0); i++)
                {
                    for (int j = 0; j < tiles.GetLength(1); j++) Console.Write(tiles[i,j]);
                    Console.WriteLine();
                }
            }
        }

        static void Main(string[] args)
        {
            // 배열
            int[] arr_Test = { 12, 2, 8, 42, 5 , 100, 1, 30, 124};
            int[] arr_Test_1 = { 12, 2, 8, 42, 5, 100, 1, 30, 124 };
            // sort 코드 단계 구조
            // { 12, 2, 8, 42, 5 , 100, 1, 30, 124};
            // { 2, 8, 12, 5, 42, 1, 30, 100, 124};
            // { 2, 8, 5, 12, 1, 30, 42, 100, 124};
            // { 2, 5, 8, 12, 1, 30, 42, 100, 124};
            // { 2, 5, 8, 1, 12, 30, 42, 100, 124};
            // { 2, 5, 1, 8, 12, 30, 42, 100, 124};
            // { 2, 1, 5, 8, 12, 30, 42, 100, 124};
            // { 1, 2, 5, 8, 12, 30, 42, 100, 124};
            int[] asd = GetSortArray(arr_Test);
            int[] asd2 = GetSortArr(arr_Test_1);

            Map map = new Map();
            map.Render();

            // 리스트
            List<int> _list = new List<int>() { 1,2,3,4,5 };
            // _list[2] 에 값이 들어가고 _list[2]부터 뒤에 값들은 한칸씩 밀림
            //_list.Insert(123, 2);

            // 해쉬 테이블
            // 리스트 10000개를 만들 때 10개짜리 공간 1000개를 만듬
            // Hash Function에 키를 넣은 후 값이 공간의 위치를 받고 거기에서 값을 찾음
            // 리스트는 특정 값을 찾으려면 평균적으로 수천번을 루프하지만 Hash Table을 이용하면 테이블 찾고 기껏해야 10번 루프함
            // 공간을 많이 만들기 때문에 메모리는 손해임 하지만 성능은 좋음